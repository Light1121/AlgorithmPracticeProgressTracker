first try:
sort every value then map each number of candy that value going to get?
since we need a minimum 1 for each child, the lowests value has to be = 0
I think is good to start with smallest value. 
but in the case 1,0,99, does not matter how much higher, we still only give out 2,1,2.
**so adjacent/neighbors is the key. not value ....**

just a for loop from first index if lower -= candy, if lager then += candy.
this wont work if it is a sorted ascending or descending array 

First use a map to record all the numbers, 
for example, 0 the value in the index 1, 2, 6 have appeared, and then other values and his index
And then loop.
Starting with the lowest, let's say it's 0.
Then compare the left and right sides of index 1, and if it's greater than that, then candy +1,
 and then since it's already the lowest value, we don't care if it's anything else.
Then the next lowest value is +1 if it's greater, and if it is, it stays, because it's already the previous lowest value.

        n = len(ratings)
        # at least one for each
        candies = [1] * n
        
        # rating value map
        rating_map = {}
        for i, r in enumerate(ratings):
            if r not in rating_map:
                rating_map[r] = []
            rating_map[r].append(i)
        
        # from lowest to highest
        for r in sorted(rating_map.keys()):
            for i in rating_map[r]:
                # see if neighbors is lagrer (LEFT)
                if i > 0 and ratings[i] > ratings[i - 1]:
                    candies[i] = max(candies[i], candies[i - 1] + 1)
                # see if neighbors is lagrer (RIGHT)
                if i < n - 1 and ratings[i] > ratings[i + 1]:
                    candies[i] = max(candies[i], candies[i + 1] + 1)
        
        return sum(candies)



**not the optimal, somehow the worst, do this next time 13/03/2025**

