134. Gas Station

first try:
question is asking see if traveling the entire array work, but each time have to consider cost
so just make a empty tank, when go to gas station, += gas[current location]
keep track of the travel distence, whenever it is = the list size meaning we have made it travel entire route
and each step, subtrack the cost --> when ever the tank is less than0 
just reset the tank to 0, also reset a the  travel distence
and just keep moving forward, when the current is larger than the list we have to go back to the start by using %

first try code:
        total_gas = sum(gas)
        total_cost = sum(cost)

        if total_cost > total_gas:
            return -1

        traveled_dis = 0
        tank = 0
        current = 0
        while traveled_dis != len(gas):
            tank += gas[current]

            if tank - cost[current] >= 0:
                tank -= cost[current]
                traveled_dis += 1
            else:
                # start again
                tank = 0
                traveled_dis = 0
            
            #next loop
            current += 1
            #if current hit the end of array
            current = current%(len(gas))
        
        return current

**first try was the worst solution**


use new solution.

only need 2 variable this time
tank and start.
just fill the tank and subtrack the cost at the same time,
when it is negative reset, and set the start to next index
use for loop instead.

class Solution(object):
    def canCompleteCircuit(self, gas, cost):
        """
        :type gas: List[int]
        :type cost: List[int]
        :rtype: int
        """
        total_gas = sum(gas)
        total_cost = sum(cost)

        if total_cost > total_gas:
            return -1

        tank = 0
        start = 0
        for i in range(len(gas)):
            tank += gas[i] - cost[i]
            if tank < 0:
                tank = 0
                start = i+1
        
        return start



