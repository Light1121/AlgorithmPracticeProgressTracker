this questions can be solve using map
first find the different between target and the current element,
then save this into a map with  diff_value: index, the index is index of that element

so then we looping the array, when the diff is found, we can locate the first element by index
this should take O(n) time
        diff_map = {}

        for i in range(len(numbers)):
            diff = target - numbers[i]  

            if numbers[i] in diff_map: 
                return [diff_map[numbers[i]]+1, i+1]

            diff_map[diff] = i

best way is to use 2 pointer
since this is sorted, one pointer one left one on right
when 2 pointer adds up larger than target, then move right down
if smaller than target, move left up

        left, right = 0, len(numbers) -1

        while left < right:
            ans = numbers[left] + numbers[right]
            if ans == target:
                return [left+1, right+1]
            elif ans>target:
                right -= 1
            else:
                left += 1
        

